/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/perfect-scrollbar.min.js":
/*!***********************************************!*\
  !*** ./resources/js/perfect-scrollbar.min.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * perfect-scrollbar v1.5.1\n * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors\n * Licensed under MIT\n */\n(function (a, b) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = b() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function () {\n  'use strict';\n\n  var u = Math.abs,\n      v = Math.floor;\n\n  function a(a) {\n    return getComputedStyle(a);\n  }\n\n  function b(a, b) {\n    for (var c in b) {\n      var d = b[c];\n      \"number\" == typeof d && (d += \"px\"), a.style[c] = d;\n    }\n\n    return a;\n  }\n\n  function c(a) {\n    var b = document.createElement(\"div\");\n    return b.className = a, b;\n  }\n\n  function d(a, b) {\n    if (!w) throw new Error(\"No element matching method supported\");\n    return w.call(a, b);\n  }\n\n  function e(a) {\n    a.remove ? a.remove() : a.parentNode && a.parentNode.removeChild(a);\n  }\n\n  function f(a, b) {\n    return Array.prototype.filter.call(a.children, function (a) {\n      return d(a, b);\n    });\n  }\n\n  function g(a, b) {\n    var c = a.element.classList,\n        d = z.state.scrolling(b);\n    c.contains(d) ? clearTimeout(A[b]) : c.add(d);\n  }\n\n  function h(a, b) {\n    A[b] = setTimeout(function () {\n      return a.isAlive && a.element.classList.remove(z.state.scrolling(b));\n    }, a.settings.scrollingThreshold);\n  }\n\n  function j(a, b) {\n    g(a, b), h(a, b);\n  }\n\n  function k(a) {\n    if (\"function\" == typeof window.CustomEvent) return new CustomEvent(a);\n    var b = document.createEvent(\"CustomEvent\");\n    return b.initCustomEvent(a, !1, !1, void 0), b;\n  }\n\n  function l(a, b, c, d, e) {\n    void 0 === d && (d = !0), void 0 === e && (e = !1);\n    var f;\n    if (\"top\" === b) f = [\"contentHeight\", \"containerHeight\", \"scrollTop\", \"y\", \"up\", \"down\"];else if (\"left\" === b) f = [\"contentWidth\", \"containerWidth\", \"scrollLeft\", \"x\", \"left\", \"right\"];else throw new Error(\"A proper axis should be provided\");\n    m(a, c, f, d, e);\n  }\n\n  function m(a, b, c, d, e) {\n    var f = c[0],\n        g = c[1],\n        h = c[2],\n        i = c[3],\n        l = c[4],\n        m = c[5];\n    void 0 === d && (d = !0), void 0 === e && (e = !1);\n    var n = a.element; // reset reach\n\n    a.reach[i] = null, 1 > n[h] && (a.reach[i] = \"start\"), n[h] > a[f] - a[g] - 1 && (a.reach[i] = \"end\"), b && (n.dispatchEvent(k(\"ps-scroll-\" + i)), 0 > b ? n.dispatchEvent(k(\"ps-scroll-\" + l)) : 0 < b && n.dispatchEvent(k(\"ps-scroll-\" + m)), d && j(a, i)), a.reach[i] && (b || e) && n.dispatchEvent(k(\"ps-\" + i + \"-reach-\" + a.reach[i]));\n  }\n\n  function n(a) {\n    return parseInt(a, 10) || 0;\n  }\n\n  function o(a) {\n    return d(a, \"input,[contenteditable]\") || d(a, \"select,[contenteditable]\") || d(a, \"textarea,[contenteditable]\") || d(a, \"button,[contenteditable]\");\n  }\n\n  function p(b) {\n    var c = a(b);\n    return n(c.width) + n(c.paddingLeft) + n(c.paddingRight) + n(c.borderLeftWidth) + n(c.borderRightWidth);\n  }\n\n  function q(a) {\n    var b = Math.ceil,\n        c = a.element,\n        d = v(c.scrollTop),\n        g = c.getBoundingClientRect();\n    a.containerWidth = b(g.width), a.containerHeight = b(g.height), a.contentWidth = c.scrollWidth, a.contentHeight = c.scrollHeight, c.contains(a.scrollbarXRail) || (f(c, z.element.rail(\"x\")).forEach(function (a) {\n      return e(a);\n    }), c.appendChild(a.scrollbarXRail)), c.contains(a.scrollbarYRail) || (f(c, z.element.rail(\"y\")).forEach(function (a) {\n      return e(a);\n    }), c.appendChild(a.scrollbarYRail)), !a.settings.suppressScrollX && a.containerWidth + a.settings.scrollXMarginOffset < a.contentWidth ? (a.scrollbarXActive = !0, a.railXWidth = a.containerWidth - a.railXMarginWidth, a.railXRatio = a.containerWidth / a.railXWidth, a.scrollbarXWidth = r(a, n(a.railXWidth * a.containerWidth / a.contentWidth)), a.scrollbarXLeft = n((a.negativeScrollAdjustment + c.scrollLeft) * (a.railXWidth - a.scrollbarXWidth) / (a.contentWidth - a.containerWidth))) : a.scrollbarXActive = !1, !a.settings.suppressScrollY && a.containerHeight + a.settings.scrollYMarginOffset < a.contentHeight ? (a.scrollbarYActive = !0, a.railYHeight = a.containerHeight - a.railYMarginHeight, a.railYRatio = a.containerHeight / a.railYHeight, a.scrollbarYHeight = r(a, n(a.railYHeight * a.containerHeight / a.contentHeight)), a.scrollbarYTop = n(d * (a.railYHeight - a.scrollbarYHeight) / (a.contentHeight - a.containerHeight))) : a.scrollbarYActive = !1, a.scrollbarXLeft >= a.railXWidth - a.scrollbarXWidth && (a.scrollbarXLeft = a.railXWidth - a.scrollbarXWidth), a.scrollbarYTop >= a.railYHeight - a.scrollbarYHeight && (a.scrollbarYTop = a.railYHeight - a.scrollbarYHeight), s(c, a), a.scrollbarXActive ? c.classList.add(z.state.active(\"x\")) : (c.classList.remove(z.state.active(\"x\")), a.scrollbarXWidth = 0, a.scrollbarXLeft = 0, c.scrollLeft = !0 === a.isRtl ? a.contentWidth : 0), a.scrollbarYActive ? c.classList.add(z.state.active(\"y\")) : (c.classList.remove(z.state.active(\"y\")), a.scrollbarYHeight = 0, a.scrollbarYTop = 0, c.scrollTop = 0);\n  }\n\n  function r(a, b) {\n    var c = Math.min,\n        d = Math.max;\n    return a.settings.minScrollbarLength && (b = d(b, a.settings.minScrollbarLength)), a.settings.maxScrollbarLength && (b = c(b, a.settings.maxScrollbarLength)), b;\n  }\n\n  function s(a, c) {\n    var d = {\n      width: c.railXWidth\n    },\n        e = v(a.scrollTop);\n    d.left = c.isRtl ? c.negativeScrollAdjustment + a.scrollLeft + c.containerWidth - c.contentWidth : a.scrollLeft, c.isScrollbarXUsingBottom ? d.bottom = c.scrollbarXBottom - e : d.top = c.scrollbarXTop + e, b(c.scrollbarXRail, d);\n    var f = {\n      top: e,\n      height: c.railYHeight\n    };\n    c.isScrollbarYUsingRight ? c.isRtl ? f.right = c.contentWidth - (c.negativeScrollAdjustment + a.scrollLeft) - c.scrollbarYRight - c.scrollbarYOuterWidth - 9 : f.right = c.scrollbarYRight - a.scrollLeft : c.isRtl ? f.left = c.negativeScrollAdjustment + a.scrollLeft + 2 * c.containerWidth - c.contentWidth - c.scrollbarYLeft - c.scrollbarYOuterWidth : f.left = c.scrollbarYLeft + a.scrollLeft, b(c.scrollbarYRail, f), b(c.scrollbarX, {\n      left: c.scrollbarXLeft,\n      width: c.scrollbarXWidth - c.railBorderXWidth\n    }), b(c.scrollbarY, {\n      top: c.scrollbarYTop,\n      height: c.scrollbarYHeight - c.railBorderYWidth\n    });\n  }\n\n  function t(a, b) {\n    function c(b) {\n      b.touches && b.touches[0] && (b[k] = b.touches[0].pageY), s[o] = t + v * (b[k] - u), g(a, p), q(a), b.stopPropagation(), b.preventDefault();\n    }\n\n    function d() {\n      h(a, p), a[r].classList.remove(z.state.clicking), a.event.unbind(a.ownerDocument, \"mousemove\", c);\n    }\n\n    function f(b, e) {\n      t = s[o], e && b.touches && (b[k] = b.touches[0].pageY), u = b[k], v = (a[j] - a[i]) / (a[l] - a[n]), e ? a.event.bind(a.ownerDocument, \"touchmove\", c) : (a.event.bind(a.ownerDocument, \"mousemove\", c), a.event.once(a.ownerDocument, \"mouseup\", d), b.preventDefault()), a[r].classList.add(z.state.clicking), b.stopPropagation();\n    }\n\n    var i = b[0],\n        j = b[1],\n        k = b[2],\n        l = b[3],\n        m = b[4],\n        n = b[5],\n        o = b[6],\n        p = b[7],\n        r = b[8],\n        s = a.element,\n        t = null,\n        u = null,\n        v = null;\n    a.event.bind(a[m], \"mousedown\", function (a) {\n      f(a);\n    }), a.event.bind(a[m], \"touchstart\", function (a) {\n      f(a, !0);\n    });\n  }\n\n  var w = \"undefined\" != typeof Element && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector),\n      z = {\n    main: \"ps\",\n    rtl: \"ps__rtl\",\n    element: {\n      thumb: function thumb(a) {\n        return \"ps__thumb-\" + a;\n      },\n      rail: function rail(a) {\n        return \"ps__rail-\" + a;\n      },\n      consuming: \"ps__child--consume\"\n    },\n    state: {\n      focus: \"ps--focus\",\n      clicking: \"ps--clicking\",\n      active: function active(a) {\n        return \"ps--active-\" + a;\n      },\n      scrolling: function scrolling(a) {\n        return \"ps--scrolling-\" + a;\n      }\n    }\n  },\n      A = {\n    x: null,\n    y: null\n  },\n      B = function B(a) {\n    this.element = a, this.handlers = {};\n  },\n      C = {\n    isEmpty: {\n      configurable: !0\n    }\n  };\n\n  B.prototype.bind = function (a, b) {\n    \"undefined\" == typeof this.handlers[a] && (this.handlers[a] = []), this.handlers[a].push(b), this.element.addEventListener(a, b, !1);\n  }, B.prototype.unbind = function (a, b) {\n    var c = this;\n    this.handlers[a] = this.handlers[a].filter(function (d) {\n      return !!(b && d !== b) || (c.element.removeEventListener(a, d, !1), !1);\n    });\n  }, B.prototype.unbindAll = function () {\n    for (var a in this.handlers) {\n      this.unbind(a);\n    }\n  }, C.isEmpty.get = function () {\n    var a = this;\n    return Object.keys(this.handlers).every(function (b) {\n      return 0 === a.handlers[b].length;\n    });\n  }, Object.defineProperties(B.prototype, C);\n\n  var D = function D() {\n    this.eventElements = [];\n  };\n\n  D.prototype.eventElement = function (a) {\n    var b = this.eventElements.filter(function (b) {\n      return b.element === a;\n    })[0];\n    return b || (b = new B(a), this.eventElements.push(b)), b;\n  }, D.prototype.bind = function (a, b, c) {\n    this.eventElement(a).bind(b, c);\n  }, D.prototype.unbind = function (a, b, c) {\n    var d = this.eventElement(a);\n    d.unbind(b, c), d.isEmpty && this.eventElements.splice(this.eventElements.indexOf(d), 1);\n  }, D.prototype.unbindAll = function () {\n    this.eventElements.forEach(function (a) {\n      return a.unbindAll();\n    }), this.eventElements = [];\n  }, D.prototype.once = function (a, b, c) {\n    var d = this.eventElement(a),\n        e = function e(a) {\n      d.unbind(b, e), c(a);\n    };\n\n    d.bind(b, e);\n  };\n\n  var E = {\n    isWebKit: \"undefined\" != typeof document && \"WebkitAppearance\" in document.documentElement.style,\n    supportsTouch: \"undefined\" != typeof window && (\"ontouchstart\" in window || \"maxTouchPoints\" in window.navigator && 0 < window.navigator.maxTouchPoints || window.DocumentTouch && document instanceof window.DocumentTouch),\n    supportsIePointer: \"undefined\" != typeof navigator && navigator.msMaxTouchPoints,\n    isChrome: \"undefined\" != typeof navigator && /Chrome/i.test(navigator && navigator.userAgent)\n  },\n      F = function F() {\n    return {\n      handlers: [\"click-rail\", \"drag-thumb\", \"keyboard\", \"wheel\", \"touch\"],\n      maxScrollbarLength: null,\n      minScrollbarLength: null,\n      scrollingThreshold: 1e3,\n      scrollXMarginOffset: 0,\n      scrollYMarginOffset: 0,\n      suppressScrollX: !1,\n      suppressScrollY: !1,\n      swipeEasing: !0,\n      useBothWheelAxes: !1,\n      wheelPropagation: !0,\n      wheelSpeed: 1\n    };\n  },\n      G = {\n    \"click-rail\": function clickRail(a) {\n      a.element;\n      a.event.bind(a.scrollbarY, \"mousedown\", function (a) {\n        return a.stopPropagation();\n      }), a.event.bind(a.scrollbarYRail, \"mousedown\", function (b) {\n        var c = b.pageY - window.pageYOffset - a.scrollbarYRail.getBoundingClientRect().top,\n            d = c > a.scrollbarYTop ? 1 : -1;\n        a.element.scrollTop += d * a.containerHeight, q(a), b.stopPropagation();\n      }), a.event.bind(a.scrollbarX, \"mousedown\", function (a) {\n        return a.stopPropagation();\n      }), a.event.bind(a.scrollbarXRail, \"mousedown\", function (b) {\n        var c = b.pageX - window.pageXOffset - a.scrollbarXRail.getBoundingClientRect().left,\n            d = c > a.scrollbarXLeft ? 1 : -1;\n        a.element.scrollLeft += d * a.containerWidth, q(a), b.stopPropagation();\n      });\n    },\n    \"drag-thumb\": function dragThumb(a) {\n      t(a, [\"containerWidth\", \"contentWidth\", \"pageX\", \"railXWidth\", \"scrollbarX\", \"scrollbarXWidth\", \"scrollLeft\", \"x\", \"scrollbarXRail\"]), t(a, [\"containerHeight\", \"contentHeight\", \"pageY\", \"railYHeight\", \"scrollbarY\", \"scrollbarYHeight\", \"scrollTop\", \"y\", \"scrollbarYRail\"]);\n    },\n    keyboard: function keyboard(a) {\n      function b(b, d) {\n        var e = v(c.scrollTop);\n\n        if (0 === b) {\n          if (!a.scrollbarYActive) return !1;\n          if (0 === e && 0 < d || e >= a.contentHeight - a.containerHeight && 0 > d) return !a.settings.wheelPropagation;\n        }\n\n        var f = c.scrollLeft;\n\n        if (0 === d) {\n          if (!a.scrollbarXActive) return !1;\n          if (0 === f && 0 > b || f >= a.contentWidth - a.containerWidth && 0 < b) return !a.settings.wheelPropagation;\n        }\n\n        return !0;\n      }\n\n      var c = a.element,\n          f = function f() {\n        return d(c, \":hover\");\n      },\n          g = function g() {\n        return d(a.scrollbarX, \":focus\") || d(a.scrollbarY, \":focus\");\n      };\n\n      a.event.bind(a.ownerDocument, \"keydown\", function (d) {\n        if (!(d.isDefaultPrevented && d.isDefaultPrevented() || d.defaultPrevented) && (f() || g())) {\n          var e = document.activeElement ? document.activeElement : a.ownerDocument.activeElement;\n\n          if (e) {\n            if (\"IFRAME\" === e.tagName) e = e.contentDocument.activeElement;else // go deeper if element is a webcomponent\n              for (; e.shadowRoot;) {\n                e = e.shadowRoot.activeElement;\n              }\n            if (o(e)) return;\n          }\n\n          var h = 0,\n              i = 0;\n\n          switch (d.which) {\n            case 37:\n              h = d.metaKey ? -a.contentWidth : d.altKey ? -a.containerWidth : -30;\n              break;\n\n            case 38:\n              i = d.metaKey ? a.contentHeight : d.altKey ? a.containerHeight : 30;\n              break;\n\n            case 39:\n              h = d.metaKey ? a.contentWidth : d.altKey ? a.containerWidth : 30;\n              break;\n\n            case 40:\n              i = d.metaKey ? -a.contentHeight : d.altKey ? -a.containerHeight : -30;\n              break;\n\n            case 32:\n              i = d.shiftKey ? a.containerHeight : -a.containerHeight;\n              break;\n\n            case 33:\n              i = a.containerHeight;\n              break;\n\n            case 34:\n              i = -a.containerHeight;\n              break;\n\n            case 36:\n              i = a.contentHeight;\n              break;\n\n            case 35:\n              i = -a.contentHeight;\n              break;\n\n            default:\n              return;\n          }\n\n          a.settings.suppressScrollX && 0 !== h || a.settings.suppressScrollY && 0 !== i || (c.scrollTop -= i, c.scrollLeft += h, q(a), b(h, i) && d.preventDefault());\n        }\n      });\n    },\n    wheel: function wheel(b) {\n      function c(a, c) {\n        var d,\n            e = v(h.scrollTop),\n            f = 0 === h.scrollTop,\n            g = e + h.offsetHeight === h.scrollHeight,\n            i = 0 === h.scrollLeft,\n            j = h.scrollLeft + h.offsetWidth === h.scrollWidth;\n        return d = u(c) > u(a) ? f || g : i || j, !d || !b.settings.wheelPropagation;\n      }\n\n      function d(a) {\n        var b = a.deltaX,\n            c = -1 * a.deltaY;\n        return (\"undefined\" == typeof b || \"undefined\" == typeof c) && (b = -1 * a.wheelDeltaX / 6, c = a.wheelDeltaY / 6), a.deltaMode && 1 === a.deltaMode && (b *= 10, c *= 10), b !== b && c !== c\n        /* NaN checks */\n        && (b = 0, c = a.wheelDelta), a.shiftKey ? [-c, -b] : [b, c];\n      }\n\n      function f(b, c, d) {\n        // FIXME: this is a workaround for <select> issue in FF and IE #571\n        if (!E.isWebKit && h.querySelector(\"select:focus\")) return !0;\n        if (!h.contains(b)) return !1;\n\n        for (var e = b; e && e !== h;) {\n          if (e.classList.contains(z.element.consuming)) return !0;\n          var f = a(e); // if deltaY && vertical scrollable\n\n          if (d && f.overflowY.match(/(scroll|auto)/)) {\n            var g = e.scrollHeight - e.clientHeight;\n            if (0 < g && (0 < e.scrollTop && 0 > d || e.scrollTop < g && 0 < d)) return !0;\n          } // if deltaX && horizontal scrollable\n\n\n          if (c && f.overflowX.match(/(scroll|auto)/)) {\n            var i = e.scrollWidth - e.clientWidth;\n            if (0 < i && (0 < e.scrollLeft && 0 > c || e.scrollLeft < i && 0 < c)) return !0;\n          }\n\n          e = e.parentNode;\n        }\n\n        return !1;\n      }\n\n      function g(a) {\n        var e = d(a),\n            g = e[0],\n            i = e[1];\n\n        if (!f(a.target, g, i)) {\n          var j = !1;\n          b.settings.useBothWheelAxes ? b.scrollbarYActive && !b.scrollbarXActive ? (i ? h.scrollTop -= i * b.settings.wheelSpeed : h.scrollTop += g * b.settings.wheelSpeed, j = !0) : b.scrollbarXActive && !b.scrollbarYActive && (g ? h.scrollLeft += g * b.settings.wheelSpeed : h.scrollLeft -= i * b.settings.wheelSpeed, j = !0) : (h.scrollTop -= i * b.settings.wheelSpeed, h.scrollLeft += g * b.settings.wheelSpeed), q(b), j = j || c(g, i), j && !a.ctrlKey && (a.stopPropagation(), a.preventDefault());\n        }\n      }\n\n      var h = b.element;\n      \"undefined\" == typeof window.onwheel ? \"undefined\" != typeof window.onmousewheel && b.event.bind(h, \"mousewheel\", g) : b.event.bind(h, \"wheel\", g);\n    },\n    touch: function touch(b) {\n      function c(a, c) {\n        var d = v(l.scrollTop),\n            e = l.scrollLeft,\n            f = u(a),\n            g = u(c);\n\n        if (g > f) {\n          // user is perhaps trying to swipe up/down the page\n          if (0 > c && d === b.contentHeight - b.containerHeight || 0 < c && 0 === d) // set prevent for mobile Chrome refresh\n            return 0 === window.scrollY && 0 < c && E.isChrome;\n        } else if (f > g && (0 > a && e === b.contentWidth - b.containerWidth || 0 < a && 0 === e)) // user is perhaps trying to swipe left/right across the page\n          return !0;\n\n        return !0;\n      }\n\n      function d(a, c) {\n        l.scrollTop -= c, l.scrollLeft -= a, q(b);\n      }\n\n      function f(a) {\n        return a.targetTouches ? a.targetTouches[0] : a;\n      }\n\n      function g(a) {\n        return !(a.pointerType && \"pen\" === a.pointerType && 0 === a.buttons) && (!!(a.targetTouches && 1 === a.targetTouches.length) || !!(a.pointerType && \"mouse\" !== a.pointerType && a.pointerType !== a.MSPOINTER_TYPE_MOUSE));\n      }\n\n      function h(a) {\n        if (g(a)) {\n          var b = f(a);\n          m.pageX = b.pageX, m.pageY = b.pageY, n = new Date().getTime(), null !== p && clearInterval(p);\n        }\n      }\n\n      function i(b, c, d) {\n        if (!l.contains(b)) return !1;\n\n        for (var e = b; e && e !== l;) {\n          if (e.classList.contains(z.element.consuming)) return !0;\n          var f = a(e); // if deltaY && vertical scrollable\n\n          if (d && f.overflowY.match(/(scroll|auto)/)) {\n            var g = e.scrollHeight - e.clientHeight;\n            if (0 < g && (0 < e.scrollTop && 0 > d || e.scrollTop < g && 0 < d)) return !0;\n          } // if deltaX && horizontal scrollable\n\n\n          if (c && f.overflowX.match(/(scroll|auto)/)) {\n            var h = e.scrollWidth - e.clientWidth;\n            if (0 < h && (0 < e.scrollLeft && 0 > c || e.scrollLeft < h && 0 < c)) return !0;\n          }\n\n          e = e.parentNode;\n        }\n\n        return !1;\n      }\n\n      function j(a) {\n        if (g(a)) {\n          var b = f(a),\n              e = {\n            pageX: b.pageX,\n            pageY: b.pageY\n          },\n              h = e.pageX - m.pageX,\n              j = e.pageY - m.pageY;\n          if (i(a.target, h, j)) return;\n          d(h, j), m = e;\n          var k = new Date().getTime(),\n              l = k - n;\n          0 < l && (o.x = h / l, o.y = j / l, n = k), c(h, j) && a.preventDefault();\n        }\n      }\n\n      function k() {\n        b.settings.swipeEasing && (clearInterval(p), p = setInterval(function () {\n          return b.isInitialized ? void clearInterval(p) : o.x || o.y ? .01 > u(o.x) && .01 > u(o.y) ? void clearInterval(p) : void (d(30 * o.x, 30 * o.y), o.x *= .8, o.y *= .8) : void clearInterval(p);\n        }, 10));\n      }\n\n      if (E.supportsTouch || E.supportsIePointer) {\n        var l = b.element,\n            m = {},\n            n = 0,\n            o = {},\n            p = null;\n        E.supportsTouch ? (b.event.bind(l, \"touchstart\", h), b.event.bind(l, \"touchmove\", j), b.event.bind(l, \"touchend\", k)) : E.supportsIePointer && (window.PointerEvent ? (b.event.bind(l, \"pointerdown\", h), b.event.bind(l, \"pointermove\", j), b.event.bind(l, \"pointerup\", k)) : window.MSPointerEvent && (b.event.bind(l, \"MSPointerDown\", h), b.event.bind(l, \"MSPointerMove\", j), b.event.bind(l, \"MSPointerUp\", k)));\n      }\n    }\n  },\n      H = function H(d, e) {\n    var f = this;\n    if (void 0 === e && (e = {}), \"string\" == typeof d && (d = document.querySelector(d)), !d || !d.nodeName) throw new Error(\"no element is specified to initialize PerfectScrollbar\");\n\n    for (var g in this.element = d, d.classList.add(z.main), this.settings = F(), e) {\n      this.settings[g] = e[g];\n    }\n\n    this.containerWidth = null, this.containerHeight = null, this.contentWidth = null, this.contentHeight = null;\n\n    var h = function h() {\n      return d.classList.add(z.state.focus);\n    },\n        i = function i() {\n      return d.classList.remove(z.state.focus);\n    };\n\n    this.isRtl = \"rtl\" === a(d).direction, !0 === this.isRtl && d.classList.add(z.rtl), this.isNegativeScroll = function () {\n      var a = d.scrollLeft,\n          b = null;\n      return d.scrollLeft = -1, b = 0 > d.scrollLeft, d.scrollLeft = a, b;\n    }(), this.negativeScrollAdjustment = this.isNegativeScroll ? d.scrollWidth - d.clientWidth : 0, this.event = new D(), this.ownerDocument = d.ownerDocument || document, this.scrollbarXRail = c(z.element.rail(\"x\")), d.appendChild(this.scrollbarXRail), this.scrollbarX = c(z.element.thumb(\"x\")), this.scrollbarXRail.appendChild(this.scrollbarX), this.scrollbarX.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarX, \"focus\", h), this.event.bind(this.scrollbarX, \"blur\", i), this.scrollbarXActive = null, this.scrollbarXWidth = null, this.scrollbarXLeft = null;\n    var j = a(this.scrollbarXRail);\n    this.scrollbarXBottom = parseInt(j.bottom, 10), isNaN(this.scrollbarXBottom) ? (this.isScrollbarXUsingBottom = !1, this.scrollbarXTop = n(j.top)) : this.isScrollbarXUsingBottom = !0, this.railBorderXWidth = n(j.borderLeftWidth) + n(j.borderRightWidth), b(this.scrollbarXRail, {\n      display: \"block\"\n    }), this.railXMarginWidth = n(j.marginLeft) + n(j.marginRight), b(this.scrollbarXRail, {\n      display: \"\"\n    }), this.railXWidth = null, this.railXRatio = null, this.scrollbarYRail = c(z.element.rail(\"y\")), d.appendChild(this.scrollbarYRail), this.scrollbarY = c(z.element.thumb(\"y\")), this.scrollbarYRail.appendChild(this.scrollbarY), this.scrollbarY.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarY, \"focus\", h), this.event.bind(this.scrollbarY, \"blur\", i), this.scrollbarYActive = null, this.scrollbarYHeight = null, this.scrollbarYTop = null;\n    var k = a(this.scrollbarYRail);\n    this.scrollbarYRight = parseInt(k.right, 10), isNaN(this.scrollbarYRight) ? (this.isScrollbarYUsingRight = !1, this.scrollbarYLeft = n(k.left)) : this.isScrollbarYUsingRight = !0, this.scrollbarYOuterWidth = this.isRtl ? p(this.scrollbarY) : null, this.railBorderYWidth = n(k.borderTopWidth) + n(k.borderBottomWidth), b(this.scrollbarYRail, {\n      display: \"block\"\n    }), this.railYMarginHeight = n(k.marginTop) + n(k.marginBottom), b(this.scrollbarYRail, {\n      display: \"\"\n    }), this.railYHeight = null, this.railYRatio = null, this.reach = {\n      x: 0 >= d.scrollLeft ? \"start\" : d.scrollLeft >= this.contentWidth - this.containerWidth ? \"end\" : null,\n      y: 0 >= d.scrollTop ? \"start\" : d.scrollTop >= this.contentHeight - this.containerHeight ? \"end\" : null\n    }, this.isAlive = !0, this.settings.handlers.forEach(function (a) {\n      return G[a](f);\n    }), this.lastScrollTop = v(d.scrollTop), this.lastScrollLeft = d.scrollLeft, this.event.bind(this.element, \"scroll\", function (a) {\n      return f.onScroll(a);\n    }), q(this);\n  };\n\n  return H.prototype.update = function () {\n    this.isAlive && ( // Recalcuate negative scrollLeft adjustment\n    // Recalculate rail margins\n    // Hide scrollbars not to affect scrollWidth and scrollHeight\n    this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0, b(this.scrollbarXRail, {\n      display: \"block\"\n    }), b(this.scrollbarYRail, {\n      display: \"block\"\n    }), this.railXMarginWidth = n(a(this.scrollbarXRail).marginLeft) + n(a(this.scrollbarXRail).marginRight), this.railYMarginHeight = n(a(this.scrollbarYRail).marginTop) + n(a(this.scrollbarYRail).marginBottom), b(this.scrollbarXRail, {\n      display: \"none\"\n    }), b(this.scrollbarYRail, {\n      display: \"none\"\n    }), q(this), l(this, \"top\", 0, !1, !0), l(this, \"left\", 0, !1, !0), b(this.scrollbarXRail, {\n      display: \"\"\n    }), b(this.scrollbarYRail, {\n      display: \"\"\n    }));\n  }, H.prototype.onScroll = function () {\n    this.isAlive && (q(this), l(this, \"top\", this.element.scrollTop - this.lastScrollTop), l(this, \"left\", this.element.scrollLeft - this.lastScrollLeft), this.lastScrollTop = v(this.element.scrollTop), this.lastScrollLeft = this.element.scrollLeft);\n  }, H.prototype.destroy = function () {\n    this.isAlive && ( // unset elements\n    this.event.unbindAll(), e(this.scrollbarX), e(this.scrollbarY), e(this.scrollbarXRail), e(this.scrollbarYRail), this.removePsClasses(), this.element = null, this.scrollbarX = null, this.scrollbarY = null, this.scrollbarXRail = null, this.scrollbarYRail = null, this.isAlive = !1);\n  }, H.prototype.removePsClasses = function () {\n    this.element.className = this.element.className.split(\" \").filter(function (a) {\n      return !a.match(/^ps([-_].+|)$/);\n    }).join(\" \");\n  }, H;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/perfect-scrollbar.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/perfect-scrollbar.min.js");
/******/ 	
/******/ })()
;