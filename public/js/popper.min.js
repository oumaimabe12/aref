/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/popper.min.js":
/*!************************************!*\
  !*** ./resources/js/popper.min.js ***!
  \************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @popperjs/core v2.10.1 - MIT License\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? t(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (e) {\n  function t(e) {\n    return null == e ? window : \"[object Window]\" !== e.toString() ? (e = e.ownerDocument) && e.defaultView || window : e;\n  }\n\n  function n(e) {\n    return e instanceof t(e).Element || e instanceof Element;\n  }\n\n  function o(e) {\n    return e instanceof t(e).HTMLElement || e instanceof HTMLElement;\n  }\n\n  function r(e) {\n    return \"undefined\" != typeof ShadowRoot && (e instanceof t(e).ShadowRoot || e instanceof ShadowRoot);\n  }\n\n  function i(e, t) {\n    void 0 === t && (t = !1);\n    var n = e.getBoundingClientRect(),\n        r = 1,\n        i = 1;\n    return o(e) && t && (t = e.offsetHeight, 0 < (e = e.offsetWidth) && (r = n.width / e || 1), 0 < t && (i = n.height / t || 1)), {\n      width: N(n.width / r),\n      height: N(n.height / i),\n      top: N(n.top / i),\n      right: N(n.right / r),\n      bottom: N(n.bottom / i),\n      left: N(n.left / r),\n      x: N(n.left / r),\n      y: N(n.top / i)\n    };\n  }\n\n  function a(e) {\n    return {\n      scrollLeft: (e = t(e)).pageXOffset,\n      scrollTop: e.pageYOffset\n    };\n  }\n\n  function s(e) {\n    return e ? (e.nodeName || \"\").toLowerCase() : null;\n  }\n\n  function f(e) {\n    return ((n(e) ? e.ownerDocument : e.document) || window.document).documentElement;\n  }\n\n  function p(e) {\n    return i(f(e)).left + a(e).scrollLeft;\n  }\n\n  function c(e) {\n    return t(e).getComputedStyle(e);\n  }\n\n  function l(e) {\n    return e = c(e), /auto|scroll|overlay|hidden/.test(e.overflow + e.overflowY + e.overflowX);\n  }\n\n  function u(e, n, r) {\n    void 0 === r && (r = !1);\n    var c,\n        u = o(n);\n\n    if (c = o(n)) {\n      var d = (c = n.getBoundingClientRect()).height / n.offsetHeight || 1;\n      c = 1 !== (c.width / n.offsetWidth || 1) || 1 !== d;\n    }\n\n    d = c, c = f(n), e = i(e, d), d = {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n    var h = {\n      x: 0,\n      y: 0\n    };\n    return (u || !u && !r) && ((\"body\" !== s(n) || l(c)) && (d = n !== t(n) && o(n) ? {\n      scrollLeft: n.scrollLeft,\n      scrollTop: n.scrollTop\n    } : a(n)), o(n) ? ((h = i(n, !0)).x += n.clientLeft, h.y += n.clientTop) : c && (h.x = p(c))), {\n      x: e.left + d.scrollLeft - h.x,\n      y: e.top + d.scrollTop - h.y,\n      width: e.width,\n      height: e.height\n    };\n  }\n\n  function d(e) {\n    var t = i(e),\n        n = e.offsetWidth,\n        o = e.offsetHeight;\n    return 1 >= Math.abs(t.width - n) && (n = t.width), 1 >= Math.abs(t.height - o) && (o = t.height), {\n      x: e.offsetLeft,\n      y: e.offsetTop,\n      width: n,\n      height: o\n    };\n  }\n\n  function h(e) {\n    return \"html\" === s(e) ? e : e.assignedSlot || e.parentNode || (r(e) ? e.host : null) || f(e);\n  }\n\n  function m(e) {\n    return 0 <= [\"html\", \"body\", \"#document\"].indexOf(s(e)) ? e.ownerDocument.body : o(e) && l(e) ? e : m(h(e));\n  }\n\n  function v(e, n) {\n    var o;\n    void 0 === n && (n = []);\n    var r = m(e);\n    return e = r === (null == (o = e.ownerDocument) ? void 0 : o.body), o = t(r), r = e ? [o].concat(o.visualViewport || [], l(r) ? r : []) : r, n = n.concat(r), e ? n : n.concat(v(h(r)));\n  }\n\n  function g(e) {\n    return o(e) && \"fixed\" !== c(e).position ? e.offsetParent : null;\n  }\n\n  function b(e) {\n    for (var n = t(e), r = g(e); r && 0 <= [\"table\", \"td\", \"th\"].indexOf(s(r)) && \"static\" === c(r).position;) {\n      r = g(r);\n    }\n\n    if (r && (\"html\" === s(r) || \"body\" === s(r) && \"static\" === c(r).position)) return n;\n    if (!r) e: {\n      if (r = -1 !== navigator.userAgent.toLowerCase().indexOf(\"firefox\"), -1 === navigator.userAgent.indexOf(\"Trident\") || !o(e) || \"fixed\" !== c(e).position) for (e = h(e); o(e) && 0 > [\"html\", \"body\"].indexOf(s(e));) {\n        var i = c(e);\n\n        if (\"none\" !== i.transform || \"none\" !== i.perspective || \"paint\" === i.contain || -1 !== [\"transform\", \"perspective\"].indexOf(i.willChange) || r && \"filter\" === i.willChange || r && i.filter && \"none\" !== i.filter) {\n          r = e;\n          break e;\n        }\n\n        e = e.parentNode;\n      }\n      r = null;\n    }\n    return r || n;\n  }\n\n  function y(e) {\n    function t(e) {\n      o.add(e.name), [].concat(e.requires || [], e.requiresIfExists || []).forEach(function (e) {\n        o.has(e) || (e = n.get(e)) && t(e);\n      }), r.push(e);\n    }\n\n    var n = new Map(),\n        o = new Set(),\n        r = [];\n    return e.forEach(function (e) {\n      n.set(e.name, e);\n    }), e.forEach(function (e) {\n      o.has(e.name) || t(e);\n    }), r;\n  }\n\n  function w(e) {\n    var t;\n    return function () {\n      return t || (t = new Promise(function (n) {\n        Promise.resolve().then(function () {\n          t = void 0, n(e());\n        });\n      })), t;\n    };\n  }\n\n  function x(e) {\n    return e.split(\"-\")[0];\n  }\n\n  function O(e, t) {\n    var n = t.getRootNode && t.getRootNode();\n    if (e.contains(t)) return !0;\n    if (n && r(n)) do {\n      if (t && e.isSameNode(t)) return !0;\n      t = t.parentNode || t.host;\n    } while (t);\n    return !1;\n  }\n\n  function j(e) {\n    return Object.assign({}, e, {\n      left: e.x,\n      top: e.y,\n      right: e.x + e.width,\n      bottom: e.y + e.height\n    });\n  }\n\n  function E(e, n) {\n    if (\"viewport\" === n) {\n      n = t(e);\n      var r = f(e);\n      n = n.visualViewport;\n      var s = r.clientWidth;\n      r = r.clientHeight;\n      var l = 0,\n          u = 0;\n      n && (s = n.width, r = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (l = n.offsetLeft, u = n.offsetTop)), e = j(e = {\n        width: s,\n        height: r,\n        x: l + p(e),\n        y: u\n      });\n    } else o(n) ? ((e = i(n)).top += n.clientTop, e.left += n.clientLeft, e.bottom = e.top + n.clientHeight, e.right = e.left + n.clientWidth, e.width = n.clientWidth, e.height = n.clientHeight, e.x = e.left, e.y = e.top) : (u = f(e), e = f(u), s = a(u), n = null == (r = u.ownerDocument) ? void 0 : r.body, r = z(e.scrollWidth, e.clientWidth, n ? n.scrollWidth : 0, n ? n.clientWidth : 0), l = z(e.scrollHeight, e.clientHeight, n ? n.scrollHeight : 0, n ? n.clientHeight : 0), u = -s.scrollLeft + p(u), s = -s.scrollTop, \"rtl\" === c(n || e).direction && (u += z(e.clientWidth, n ? n.clientWidth : 0) - r), e = j({\n      width: r,\n      height: l,\n      x: u,\n      y: s\n    }));\n\n    return e;\n  }\n\n  function D(e, t, r) {\n    return t = \"clippingParents\" === t ? function (e) {\n      var t = v(h(e)),\n          r = 0 <= [\"absolute\", \"fixed\"].indexOf(c(e).position) && o(e) ? b(e) : e;\n      return n(r) ? t.filter(function (e) {\n        return n(e) && O(e, r) && \"body\" !== s(e);\n      }) : [];\n    }(e) : [].concat(t), (r = (r = [].concat(t, [r])).reduce(function (t, n) {\n      return n = E(e, n), t.top = z(n.top, t.top), t.right = F(n.right, t.right), t.bottom = F(n.bottom, t.bottom), t.left = z(n.left, t.left), t;\n    }, E(e, r[0]))).width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;\n  }\n\n  function L(e) {\n    return e.split(\"-\")[1];\n  }\n\n  function M(e) {\n    return 0 <= [\"top\", \"bottom\"].indexOf(e) ? \"x\" : \"y\";\n  }\n\n  function P(e) {\n    var t = e.reference,\n        n = e.element,\n        o = (e = e.placement) ? x(e) : null;\n    e = e ? L(e) : null;\n    var r = t.x + t.width / 2 - n.width / 2,\n        i = t.y + t.height / 2 - n.height / 2;\n\n    switch (o) {\n      case \"top\":\n        r = {\n          x: r,\n          y: t.y - n.height\n        };\n        break;\n\n      case \"bottom\":\n        r = {\n          x: r,\n          y: t.y + t.height\n        };\n        break;\n\n      case \"right\":\n        r = {\n          x: t.x + t.width,\n          y: i\n        };\n        break;\n\n      case \"left\":\n        r = {\n          x: t.x - n.width,\n          y: i\n        };\n        break;\n\n      default:\n        r = {\n          x: t.x,\n          y: t.y\n        };\n    }\n\n    if (null != (o = o ? M(o) : null)) switch (i = \"y\" === o ? \"height\" : \"width\", e) {\n      case \"start\":\n        r[o] -= t[i] / 2 - n[i] / 2;\n        break;\n\n      case \"end\":\n        r[o] += t[i] / 2 - n[i] / 2;\n    }\n    return r;\n  }\n\n  function k(e) {\n    return Object.assign({}, {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }, e);\n  }\n\n  function W(e, t) {\n    return t.reduce(function (t, n) {\n      return t[n] = e, t;\n    }, {});\n  }\n\n  function A(e, t) {\n    void 0 === t && (t = {});\n    var o = t;\n    t = void 0 === (t = o.placement) ? e.placement : t;\n    var r = o.boundary,\n        a = void 0 === r ? \"clippingParents\" : r,\n        s = void 0 === (r = o.rootBoundary) ? \"viewport\" : r;\n    r = void 0 === (r = o.elementContext) ? \"popper\" : r;\n    var p = o.altBoundary,\n        c = void 0 !== p && p;\n    o = k(\"number\" != typeof (o = void 0 === (o = o.padding) ? 0 : o) ? o : W(o, V)), p = e.rects.popper, a = D(n(c = e.elements[c ? \"popper\" === r ? \"reference\" : \"popper\" : r]) ? c : c.contextElement || f(e.elements.popper), a, s), c = P({\n      reference: s = i(e.elements.reference),\n      element: p,\n      strategy: \"absolute\",\n      placement: t\n    }), p = j(Object.assign({}, p, c)), s = \"popper\" === r ? p : s;\n    var l = {\n      top: a.top - s.top + o.top,\n      bottom: s.bottom - a.bottom + o.bottom,\n      left: a.left - s.left + o.left,\n      right: s.right - a.right + o.right\n    };\n\n    if (e = e.modifiersData.offset, \"popper\" === r && e) {\n      var u = e[t];\n      Object.keys(l).forEach(function (e) {\n        var t = 0 <= [\"right\", \"bottom\"].indexOf(e) ? 1 : -1,\n            n = 0 <= [\"top\", \"bottom\"].indexOf(e) ? \"y\" : \"x\";\n        l[e] += u[n] * t;\n      });\n    }\n\n    return l;\n  }\n\n  function B() {\n    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) {\n      t[n] = arguments[n];\n    }\n\n    return !t.some(function (e) {\n      return !(e && \"function\" == typeof e.getBoundingClientRect);\n    });\n  }\n\n  function H(e) {\n    void 0 === e && (e = {});\n    var t = e.defaultModifiers,\n        o = void 0 === t ? [] : t,\n        r = void 0 === (e = e.defaultOptions) ? Y : e;\n    return function (e, t, i) {\n      function a() {\n        f.forEach(function (e) {\n          return e();\n        }), f = [];\n      }\n\n      void 0 === i && (i = r);\n      var s = {\n        placement: \"bottom\",\n        orderedModifiers: [],\n        options: Object.assign({}, Y, r),\n        modifiersData: {},\n        elements: {\n          reference: e,\n          popper: t\n        },\n        attributes: {},\n        styles: {}\n      },\n          f = [],\n          p = !1,\n          c = {\n        state: s,\n        setOptions: function setOptions(i) {\n          return i = \"function\" == typeof i ? i(s.options) : i, a(), s.options = Object.assign({}, r, s.options, i), s.scrollParents = {\n            reference: n(e) ? v(e) : e.contextElement ? v(e.contextElement) : [],\n            popper: v(t)\n          }, i = function (e) {\n            var t = y(e);\n            return U.reduce(function (e, n) {\n              return e.concat(t.filter(function (e) {\n                return e.phase === n;\n              }));\n            }, []);\n          }(function (e) {\n            var t = e.reduce(function (e, t) {\n              var n = e[t.name];\n              return e[t.name] = n ? Object.assign({}, n, t, {\n                options: Object.assign({}, n.options, t.options),\n                data: Object.assign({}, n.data, t.data)\n              }) : t, e;\n            }, {});\n            return Object.keys(t).map(function (e) {\n              return t[e];\n            });\n          }([].concat(o, s.options.modifiers))), s.orderedModifiers = i.filter(function (e) {\n            return e.enabled;\n          }), s.orderedModifiers.forEach(function (e) {\n            var t = e.name,\n                n = e.options;\n            n = void 0 === n ? {} : n, \"function\" == typeof (e = e.effect) && (t = e({\n              state: s,\n              name: t,\n              instance: c,\n              options: n\n            }), f.push(t || function () {}));\n          }), c.update();\n        },\n        forceUpdate: function forceUpdate() {\n          if (!p) {\n            var e = s.elements,\n                t = e.reference;\n            if (B(t, e = e.popper)) for (s.rects = {\n              reference: u(t, b(e), \"fixed\" === s.options.strategy),\n              popper: d(e)\n            }, s.reset = !1, s.placement = s.options.placement, s.orderedModifiers.forEach(function (e) {\n              return s.modifiersData[e.name] = Object.assign({}, e.data);\n            }), t = 0; t < s.orderedModifiers.length; t++) {\n              if (!0 === s.reset) s.reset = !1, t = -1;else {\n                var n = s.orderedModifiers[t];\n                e = n.fn;\n                var o = n.options;\n                o = void 0 === o ? {} : o, n = n.name, \"function\" == typeof e && (s = e({\n                  state: s,\n                  options: o,\n                  name: n,\n                  instance: c\n                }) || s);\n              }\n            }\n          }\n        },\n        update: w(function () {\n          return new Promise(function (e) {\n            c.forceUpdate(), e(s);\n          });\n        }),\n        destroy: function destroy() {\n          a(), p = !0;\n        }\n      };\n      return B(e, t) ? (c.setOptions(i).then(function (e) {\n        !p && i.onFirstUpdate && i.onFirstUpdate(e);\n      }), c) : c;\n    };\n  }\n\n  function T(e) {\n    var n,\n        o = e.popper,\n        r = e.popperRect,\n        i = e.placement,\n        a = e.variation,\n        s = e.offsets,\n        p = e.position,\n        l = e.gpuAcceleration,\n        u = e.adaptive;\n\n    if (!0 === (e = e.roundOffsets)) {\n      e = s.y;\n      var d = window.devicePixelRatio || 1;\n      e = {\n        x: X(X(s.x * d) / d) || 0,\n        y: X(X(e * d) / d) || 0\n      };\n    } else e = \"function\" == typeof e ? e(s) : s;\n\n    e = void 0 === (e = (d = e).x) ? 0 : e, d = void 0 === (d = d.y) ? 0 : d;\n    var h = s.hasOwnProperty(\"x\");\n    s = s.hasOwnProperty(\"y\");\n    var m,\n        v = \"left\",\n        g = \"top\",\n        y = window;\n\n    if (u) {\n      var w = b(o),\n          x = \"clientHeight\",\n          O = \"clientWidth\";\n      w === t(o) && \"static\" !== c(w = f(o)).position && \"absolute\" === p && (x = \"scrollHeight\", O = \"scrollWidth\"), \"top\" !== i && (\"left\" !== i && \"right\" !== i || \"end\" !== a) || (g = \"bottom\", d -= w[x] - r.height, d *= l ? 1 : -1), \"left\" !== i && (\"top\" !== i && \"bottom\" !== i || \"end\" !== a) || (v = \"right\", e -= w[O] - r.width, e *= l ? 1 : -1);\n    }\n\n    return o = Object.assign({\n      position: p\n    }, u && Q), l ? Object.assign({}, o, ((m = {})[g] = s ? \"0\" : \"\", m[v] = h ? \"0\" : \"\", m.transform = 1 >= (y.devicePixelRatio || 1) ? \"translate(\" + e + \"px, \" + d + \"px)\" : \"translate3d(\" + e + \"px, \" + d + \"px, 0)\", m)) : Object.assign({}, o, ((n = {})[g] = s ? d + \"px\" : \"\", n[v] = h ? e + \"px\" : \"\", n.transform = \"\", n));\n  }\n\n  function R(e) {\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return te[e];\n    });\n  }\n\n  function S(e) {\n    return e.replace(/start|end/g, function (e) {\n      return ne[e];\n    });\n  }\n\n  function C(e, t, n) {\n    return void 0 === n && (n = {\n      x: 0,\n      y: 0\n    }), {\n      top: e.top - t.height - n.y,\n      right: e.right - t.width + n.x,\n      bottom: e.bottom - t.height + n.y,\n      left: e.left - t.width - n.x\n    };\n  }\n\n  function q(e) {\n    return [\"top\", \"right\", \"bottom\", \"left\"].some(function (t) {\n      return 0 <= e[t];\n    });\n  }\n\n  var N = Math.round,\n      V = [\"top\", \"bottom\", \"right\", \"left\"],\n      I = V.reduce(function (e, t) {\n    return e.concat([t + \"-start\", t + \"-end\"]);\n  }, []),\n      _ = [].concat(V, [\"auto\"]).reduce(function (e, t) {\n    return e.concat([t, t + \"-start\", t + \"-end\"]);\n  }, []),\n      U = \"beforeRead read afterRead beforeMain main afterMain beforeWrite write afterWrite\".split(\" \"),\n      z = Math.max,\n      F = Math.min,\n      X = Math.round,\n      Y = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n  },\n      G = {\n    passive: !0\n  },\n      J = {\n    name: \"eventListeners\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function fn() {},\n    effect: function effect(e) {\n      var n = e.state,\n          o = e.instance,\n          r = (e = e.options).scroll,\n          i = void 0 === r || r,\n          a = void 0 === (e = e.resize) || e,\n          s = t(n.elements.popper),\n          f = [].concat(n.scrollParents.reference, n.scrollParents.popper);\n      return i && f.forEach(function (e) {\n        e.addEventListener(\"scroll\", o.update, G);\n      }), a && s.addEventListener(\"resize\", o.update, G), function () {\n        i && f.forEach(function (e) {\n          e.removeEventListener(\"scroll\", o.update, G);\n        }), a && s.removeEventListener(\"resize\", o.update, G);\n      };\n    },\n    data: {}\n  },\n      K = {\n    name: \"popperOffsets\",\n    enabled: !0,\n    phase: \"read\",\n    fn: function fn(e) {\n      var t = e.state;\n      t.modifiersData[e.name] = P({\n        reference: t.rects.reference,\n        element: t.rects.popper,\n        strategy: \"absolute\",\n        placement: t.placement\n      });\n    },\n    data: {}\n  },\n      Q = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n  },\n      Z = {\n    name: \"computeStyles\",\n    enabled: !0,\n    phase: \"beforeWrite\",\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.options;\n      e = void 0 === (e = n.gpuAcceleration) || e;\n      var o = n.adaptive;\n      o = void 0 === o || o, n = void 0 === (n = n.roundOffsets) || n, e = {\n        placement: x(t.placement),\n        variation: L(t.placement),\n        popper: t.elements.popper,\n        popperRect: t.rects.popper,\n        gpuAcceleration: e\n      }, null != t.modifiersData.popperOffsets && (t.styles.popper = Object.assign({}, t.styles.popper, T(Object.assign({}, e, {\n        offsets: t.modifiersData.popperOffsets,\n        position: t.options.strategy,\n        adaptive: o,\n        roundOffsets: n\n      })))), null != t.modifiersData.arrow && (t.styles.arrow = Object.assign({}, t.styles.arrow, T(Object.assign({}, e, {\n        offsets: t.modifiersData.arrow,\n        position: \"absolute\",\n        adaptive: !1,\n        roundOffsets: n\n      })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-placement\": t.placement\n      });\n    },\n    data: {}\n  },\n      $ = {\n    name: \"applyStyles\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function fn(e) {\n      var t = e.state;\n      Object.keys(t.elements).forEach(function (e) {\n        var n = t.styles[e] || {},\n            r = t.attributes[e] || {},\n            i = t.elements[e];\n        o(i) && s(i) && (Object.assign(i.style, n), Object.keys(r).forEach(function (e) {\n          var t = r[e];\n          !1 === t ? i.removeAttribute(e) : i.setAttribute(e, !0 === t ? \"\" : t);\n        }));\n      });\n    },\n    effect: function effect(e) {\n      var t = e.state,\n          n = {\n        popper: {\n          position: t.options.strategy,\n          left: \"0\",\n          top: \"0\",\n          margin: \"0\"\n        },\n        arrow: {\n          position: \"absolute\"\n        },\n        reference: {}\n      };\n      return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function () {\n        Object.keys(t.elements).forEach(function (e) {\n          var r = t.elements[e],\n              i = t.attributes[e] || {};\n          e = Object.keys(t.styles.hasOwnProperty(e) ? t.styles[e] : n[e]).reduce(function (e, t) {\n            return e[t] = \"\", e;\n          }, {}), o(r) && s(r) && (Object.assign(r.style, e), Object.keys(i).forEach(function (e) {\n            r.removeAttribute(e);\n          }));\n        });\n      };\n    },\n    requires: [\"computeStyles\"]\n  },\n      ee = {\n    name: \"offset\",\n    enabled: !0,\n    phase: \"main\",\n    requires: [\"popperOffsets\"],\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.name,\n          o = void 0 === (e = e.options.offset) ? [0, 0] : e,\n          r = (e = _.reduce(function (e, n) {\n        var r = t.rects,\n            i = x(n),\n            a = 0 <= [\"left\", \"top\"].indexOf(i) ? -1 : 1,\n            s = \"function\" == typeof o ? o(Object.assign({}, r, {\n          placement: n\n        })) : o;\n        return r = (r = s[0]) || 0, s = ((s = s[1]) || 0) * a, i = 0 <= [\"left\", \"right\"].indexOf(i) ? {\n          x: s,\n          y: r\n        } : {\n          x: r,\n          y: s\n        }, e[n] = i, e;\n      }, {}))[t.placement],\n          i = r.x;\n\n      r = r.y, null != t.modifiersData.popperOffsets && (t.modifiersData.popperOffsets.x += i, t.modifiersData.popperOffsets.y += r), t.modifiersData[n] = e;\n    }\n  },\n      te = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n  },\n      ne = {\n    start: \"end\",\n    end: \"start\"\n  },\n      oe = {\n    name: \"flip\",\n    enabled: !0,\n    phase: \"main\",\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.options;\n\n      if (e = e.name, !t.modifiersData[e]._skip) {\n        var o = n.mainAxis;\n        o = void 0 === o || o;\n        var r = n.altAxis;\n        r = void 0 === r || r;\n        var i = n.fallbackPlacements,\n            a = n.padding,\n            s = n.boundary,\n            f = n.rootBoundary,\n            p = n.altBoundary,\n            c = n.flipVariations,\n            l = void 0 === c || c,\n            u = n.allowedAutoPlacements;\n        c = x(n = t.options.placement), i = i || (c !== n && l ? function (e) {\n          if (\"auto\" === x(e)) return [];\n          var t = R(e);\n          return [S(e), t, S(t)];\n        }(n) : [R(n)]);\n        var d = [n].concat(i).reduce(function (e, n) {\n          return e.concat(\"auto\" === x(n) ? function (e, t) {\n            void 0 === t && (t = {});\n            var n = t.boundary,\n                o = t.rootBoundary,\n                r = t.padding,\n                i = t.flipVariations,\n                a = t.allowedAutoPlacements,\n                s = void 0 === a ? _ : a,\n                f = L(t.placement);\n            0 === (i = (t = f ? i ? I : I.filter(function (e) {\n              return L(e) === f;\n            }) : V).filter(function (e) {\n              return 0 <= s.indexOf(e);\n            })).length && (i = t);\n            var p = i.reduce(function (t, i) {\n              return t[i] = A(e, {\n                placement: i,\n                boundary: n,\n                rootBoundary: o,\n                padding: r\n              })[x(i)], t;\n            }, {});\n            return Object.keys(p).sort(function (e, t) {\n              return p[e] - p[t];\n            });\n          }(t, {\n            placement: n,\n            boundary: s,\n            rootBoundary: f,\n            padding: a,\n            flipVariations: l,\n            allowedAutoPlacements: u\n          }) : n);\n        }, []);\n        n = t.rects.reference, i = t.rects.popper;\n        var h = new Map();\n        c = !0;\n\n        for (var m = d[0], v = 0; v < d.length; v++) {\n          var g = d[v],\n              b = x(g),\n              y = \"start\" === L(g),\n              w = 0 <= [\"top\", \"bottom\"].indexOf(b),\n              O = w ? \"width\" : \"height\",\n              j = A(t, {\n            placement: g,\n            boundary: s,\n            rootBoundary: f,\n            altBoundary: p,\n            padding: a\n          });\n\n          if (y = w ? y ? \"right\" : \"left\" : y ? \"bottom\" : \"top\", n[O] > i[O] && (y = R(y)), O = R(y), w = [], o && w.push(0 >= j[b]), r && w.push(0 >= j[y], 0 >= j[O]), w.every(function (e) {\n            return e;\n          })) {\n            m = g, c = !1;\n            break;\n          }\n\n          h.set(g, w);\n        }\n\n        if (c) for (o = function o(e) {\n          var t = d.find(function (t) {\n            if (t = h.get(t)) return t.slice(0, e).every(function (e) {\n              return e;\n            });\n          });\n          if (t) return m = t, \"break\";\n        }, r = l ? 3 : 1; 0 < r && \"break\" !== o(r); r--) {\n          ;\n        }\n        t.placement !== m && (t.modifiersData[e]._skip = !0, t.placement = m, t.reset = !0);\n      }\n    },\n    requiresIfExists: [\"offset\"],\n    data: {\n      _skip: !1\n    }\n  },\n      re = {\n    name: \"preventOverflow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: function fn(e) {\n      var t = e.state,\n          n = e.options;\n      e = e.name;\n      var o = n.mainAxis,\n          r = void 0 === o || o,\n          i = void 0 !== (o = n.altAxis) && o;\n      o = void 0 === (o = n.tether) || o;\n      var a = n.tetherOffset,\n          s = void 0 === a ? 0 : a,\n          f = A(t, {\n        boundary: n.boundary,\n        rootBoundary: n.rootBoundary,\n        padding: n.padding,\n        altBoundary: n.altBoundary\n      });\n      n = x(t.placement);\n      var p = L(t.placement),\n          c = !p,\n          l = M(n);\n      n = \"x\" === l ? \"y\" : \"x\", a = t.modifiersData.popperOffsets;\n      var u = t.rects.reference,\n          h = t.rects.popper,\n          m = \"function\" == typeof s ? s(Object.assign({}, t.rects, {\n        placement: t.placement\n      })) : s;\n\n      if (s = {\n        x: 0,\n        y: 0\n      }, a) {\n        if (r || i) {\n          var v = \"y\" === l ? \"top\" : \"left\",\n              g = \"y\" === l ? \"bottom\" : \"right\",\n              y = \"y\" === l ? \"height\" : \"width\",\n              w = a[l],\n              O = a[l] + f[v],\n              j = a[l] - f[g],\n              E = o ? -h[y] / 2 : 0,\n              D = \"start\" === p ? u[y] : h[y];\n          p = \"start\" === p ? -h[y] : -u[y], h = t.elements.arrow, h = o && h ? d(h) : {\n            width: 0,\n            height: 0\n          };\n          var P = t.modifiersData[\"arrow#persistent\"] ? t.modifiersData[\"arrow#persistent\"].padding : {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          };\n          v = P[v], g = P[g], h = z(0, F(u[y], h[y])), D = c ? u[y] / 2 - E - h - v - m : D - h - v - m, u = c ? -u[y] / 2 + E + h + g + m : p + h + g + m, c = t.elements.arrow && b(t.elements.arrow), m = t.modifiersData.offset ? t.modifiersData.offset[t.placement][l] : 0, c = a[l] + D - m - (c ? \"y\" === l ? c.clientTop || 0 : c.clientLeft || 0 : 0), u = a[l] + u - m, r && (r = o ? F(O, c) : O, j = o ? z(j, u) : j, r = z(r, F(w, j)), a[l] = r, s[l] = r - w), i && (r = (i = a[n]) + f[\"x\" === l ? \"top\" : \"left\"], f = i - f[\"x\" === l ? \"bottom\" : \"right\"], r = o ? F(r, c) : r, o = o ? z(f, u) : f, o = z(r, F(i, o)), a[n] = o, s[n] = o - i);\n        }\n\n        t.modifiersData[e] = s;\n      }\n    },\n    requiresIfExists: [\"offset\"]\n  },\n      ie = {\n    name: \"arrow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: function fn(e) {\n      var t,\n          n = e.state,\n          o = e.name,\n          r = e.options,\n          i = n.elements.arrow,\n          a = n.modifiersData.popperOffsets,\n          s = x(n.placement);\n\n      if (e = M(s), s = 0 <= [\"left\", \"right\"].indexOf(s) ? \"height\" : \"width\", i && a) {\n        r = k(\"number\" != typeof (r = \"function\" == typeof (r = r.padding) ? r(Object.assign({}, n.rects, {\n          placement: n.placement\n        })) : r) ? r : W(r, V));\n        var f = d(i),\n            p = \"y\" === e ? \"top\" : \"left\",\n            c = \"y\" === e ? \"bottom\" : \"right\",\n            l = n.rects.reference[s] + n.rects.reference[e] - a[e] - n.rects.popper[s];\n        a = a[e] - n.rects.reference[e], a = (i = (i = b(i)) ? \"y\" === e ? i.clientHeight || 0 : i.clientWidth || 0 : 0) / 2 - f[s] / 2 + (l / 2 - a / 2), s = z(r[p], F(a, i - f[s] - r[c])), n.modifiersData[o] = ((t = {})[e] = s, t.centerOffset = s - a, t);\n      }\n    },\n    effect: function effect(e) {\n      var t = e.state;\n\n      if (null != (e = void 0 === (e = e.options.element) ? \"[data-popper-arrow]\" : e)) {\n        if (\"string\" == typeof e && !(e = t.elements.popper.querySelector(e))) return;\n        O(t.elements.popper, e) && (t.elements.arrow = e);\n      }\n    },\n    requires: [\"popperOffsets\"],\n    requiresIfExists: [\"preventOverflow\"]\n  },\n      ae = {\n    name: \"hide\",\n    enabled: !0,\n    phase: \"main\",\n    requiresIfExists: [\"preventOverflow\"],\n    fn: function fn(e) {\n      var t = e.state;\n      e = e.name;\n      var n = t.rects.reference,\n          o = t.rects.popper,\n          r = t.modifiersData.preventOverflow,\n          i = A(t, {\n        elementContext: \"reference\"\n      }),\n          a = A(t, {\n        altBoundary: !0\n      });\n      n = C(i, n), o = C(a, o, r), r = q(n), a = q(o), t.modifiersData[e] = {\n        referenceClippingOffsets: n,\n        popperEscapeOffsets: o,\n        isReferenceHidden: r,\n        hasPopperEscaped: a\n      }, t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-reference-hidden\": r,\n        \"data-popper-escaped\": a\n      });\n    }\n  },\n      se = H({\n    defaultModifiers: [J, K, Z, $]\n  }),\n      fe = [J, K, Z, $, ee, oe, re, ie, ae],\n      pe = H({\n    defaultModifiers: fe\n  });\n\n  e.applyStyles = $, e.arrow = ie, e.computeStyles = Z, e.createPopper = pe, e.createPopperLite = se, e.defaultModifiers = fe, e.detectOverflow = A, e.eventListeners = J, e.flip = oe, e.hide = ae, e.offset = ee, e.popperGenerator = H, e.popperOffsets = K, e.preventOverflow = re, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/popper.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/popper.min.js");
/******/ 	
/******/ })()
;